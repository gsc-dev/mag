# Rate limit all non-google/bing bots
# https://gist.github.com/supairish/2951524
# (Alternatively, use key $binary_remote_addr to rate limit per ip.)
# This config shares the same rate for all bots.
# These regexes are case-insensitive. --WdG
map $http_user_agent $limit_bots {
    default '';
    ~*(google|bing|pingdom|uptimerobot|shoppimon|monitis.com|Zend_Http_Client) '';
    ~*(http|crawler|spider|bot|search|ForusP|Wget/|Python-urllib|PHPCrawl|bGenius) 'bot';
}

# Don't ratelimit when bot request went through Varnish
# Turpentine sets the X-Varnish-Esi-Method header. If you don't use
# Turpentine you need to define this in your VCL yourself.
# See http://stackoverflow.com/a/29767034/4158804 for information about how mapping the header works
# See http://stackoverflow.com/a/30083902/4158804 for information about mapping variables twice
map $http_x_varnish_esi_method $limit {
    default $limit_bots;
    "~.+" '';
}

# An empty '$limit_bots' would disable rate limiting for this requests
limit_req_zone $limit zone=bots:1m rate=1r/s;
limit_req_log_level error;

# Nginx returns 503 when rate limited, but some Magento plugins also emit 503.
# Besides, 429 is more semantic.
limit_req_status 429;

# Limit amount of active dynamic requests per source IP address
map $binary_remote_addr $conn_limit_map {
    default $binary_remote_addr;
}

    # This is the conn limit per IP, so that a single IP
# cannot saturate all PHP slots. See also handler.conf
limit_conn_zone $conn_limit_map zone=zoneperip:10m;
limit_conn_status 429;
